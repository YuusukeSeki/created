//*****************************************************************************
//
//		ドローショット射程範囲
//												Autohr : Yusuke Seki
//*****************************************************************************
#include "DrawRange.h"
#include "player.h"


//-----------------------------------------------------------------------------
// コンストラクタ
//-----------------------------------------------------------------------------
DrawRange::DrawRange() :Object3D(Object::TYPE::TYPE_3D)
{
	// メンバ変数初期化
	m_pPlayer = nullptr;

}


//-----------------------------------------------------------------------------
// コンストラクタ
//-----------------------------------------------------------------------------
DrawRange::DrawRange(Object::TYPE type) :Object3D(type)
{
	// メンバ変数初期化
	m_pPlayer = nullptr;

}


//-----------------------------------------------------------------------------
// デストラクタ
//-----------------------------------------------------------------------------
DrawRange::~DrawRange()
{
	// 終了処理
	Uninit();

}


//-----------------------------------------------------------------------------
// 実体の生成
//-----------------------------------------------------------------------------
DrawRange* DrawRange::Create(Player* pPlayer)
{
	// 生成
	DrawRange* pDrawRange = new DrawRange(Object::TYPE::TYPE_3D_DRAWRANGE);

	// 初期化
	pDrawRange->Init(pPlayer);

	return pDrawRange;
}


//-----------------------------------------------------------------------------
// 初期化処理
//-----------------------------------------------------------------------------
void DrawRange::Init(Player* pPlayer)
{
	//----- データの設定 -----
	m_pPlayer = pPlayer;														// 親プレイヤーの取得
	float radius = m_pPlayer->GetDrawShotRange() * 2;							// 射程範囲の取得
	Object3D::Init(m_pPlayer->GetPosition(), D3DXVECTOR3(radius, radius, 0));	// 継承データの初期化
	SetRotate(D3DXVECTOR3(D3DXToRadian(90), 0, 0));								// 地面と平行に回転させる

}


//-----------------------------------------------------------------------------
// 終了処理
//-----------------------------------------------------------------------------
void DrawRange::Uninit(void)
{
	Object3D::Uninit();

}


//-----------------------------------------------------------------------------
// 更新処理
//-----------------------------------------------------------------------------
void DrawRange::Update(void)
{
	// 座標を親プレイヤーに追従させる
	SetPosition(m_pPlayer->GetPosition());

}


//-----------------------------------------------------------------------------
// 描画処理
//-----------------------------------------------------------------------------
void DrawRange::Draw(void)
{
	// 【描画判定】DS準備中かどうか
	if (m_pPlayer->GetPosture() != Player::POSTURE::POSTURE_DRREADY) return;	// 無処理で返す

	// 描画処理
	Object3D::Draw();

}



//=============================================================================
//	増減処理

//=============================================================================
//	設定処理

