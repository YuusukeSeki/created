//*****************************************************************************
//	
//		バレット（3D）
//													Autohr : Yusuke Seki
//*****************************************************************************
#include "Bullet3D.h"
#include "renderer.h"
#include "player.h"
#include "collision.h"



//-----------------------------------------------------------------------------
// コンストラクタ
//-----------------------------------------------------------------------------
Bullet3D::Bullet3D(Object::TYPE type) : Object3D(type)
{
	// データのクリア
	m_vecZ       = D3DXVECTOR3(0,0,0);
	m_move       = 0.f;
	m_accelerate = 0.f;
	m_bInstance  = false;
	
}


//-----------------------------------------------------------------------------
// デストラクタ
//-----------------------------------------------------------------------------
Bullet3D::~Bullet3D()
{
	Uninit();
}


//-----------------------------------------------------------------------------
// 実体の生成
//-----------------------------------------------------------------------------
Bullet3D* Bullet3D::Create(D3DXVECTOR3& position, D3DXVECTOR3& size)
{
	// 実体を生成
	Bullet3D* pBullet = new Bullet3D(Object::TYPE::TYPE_3D_BULLET);

	// 初期化
	pBullet->Init(position, size);

	return pBullet;
}


//-----------------------------------------------------------------------------
// 初期化処理
//-----------------------------------------------------------------------------
void Bullet3D::Init(D3DXVECTOR3& position, D3DXVECTOR3& size)
{
	// データの初期化
	Object3D::Init(position, size);			// 継承データの初期化
	m_vecZ       = D3DXVECTOR3(0, 0, 0);	// 向いてる方向
	m_move       = 0.f;						// 初速度
	m_accelerate = 0.f;						// 加速度
	m_bInstance  = false;					// 使用中フラグOFF

}


//-----------------------------------------------------------------------------
// 終了処理
//-----------------------------------------------------------------------------
void Bullet3D::Uninit(void)
{
	Object3D::Uninit();
}


//-----------------------------------------------------------------------------
// 描画処理
//-----------------------------------------------------------------------------
void Bullet3D::Draw(void)
{
	// 未使用で処理無し
	if (!m_bInstance) return;

	// 描画処理
	Object3D::Draw();

}


//=============================================================================
//	設定処理
// 向いてる方向の設定
void Bullet3D::SetVecZ(D3DXVECTOR3& vecZ)
{
	// 向いてる方向の設定
	m_vecZ = vecZ;
	//Object3D::SetRotate(m_vecZ);


	// ワールドマトリクスの更新フラグON
	//Object3D::SetUpdateWorldMatrix(true);
}

